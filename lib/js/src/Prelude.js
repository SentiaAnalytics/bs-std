// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Js_exn      = require("bs-platform/lib/js/js_exn.js");
var Json_decode = require("bs-json/lib/js/src/Json_decode.js");

function identity(a) {
  return a;
}

function always(a, _) {
  return a;
}

function $$void() {
  return /* () */0;
}

function $great$great(f, g, x) {
  return Curry._1(g, Curry._1(f, x));
}

function flip(f, a, b) {
  return Curry._2(f, b, a);
}

function curry(f, a, b) {
  return Curry._1(f, /* tuple */[
              a,
              b
            ]);
}

function uncurry(f, param) {
  return Curry._2(f, param[0], param[1]);
}

function tap(f, a) {
  Curry._1(f, a);
  return a;
}

function decodeJSON(decoder, json) {
  try {
    return /* Ok */Block.__(0, [Curry._1(decoder, json)]);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Json_decode.DecodeError) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      throw exn;
    }
  }
}

function parseJSON(jsonString) {
  try {
    return /* Ok */Block.__(0, [JSON.parse(jsonString)]);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      var match = exn[1].message;
      if (match !== undefined) {
        return /* Error */Block.__(1, [match]);
      } else {
        return /* Error */Block.__(1, ["Could not parse JSON"]);
      }
    } else {
      throw exn;
    }
  }
}

exports.identity     = identity;
exports.always       = always;
exports.$$void       = $$void;
exports.$great$great = $great$great;
exports.flip         = flip;
exports.curry        = curry;
exports.uncurry      = uncurry;
exports.tap          = tap;
exports.decodeJSON   = decodeJSON;
exports.parseJSON    = parseJSON;
/* No side effect */
