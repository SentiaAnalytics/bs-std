// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

function ready(a) {
  return /* Ready */Block.__(1, [a]);
}

function error(x) {
  return /* Error */Block.__(0, [x]);
}

function map(f, remote) {
  if (typeof remote === "number") {
    if (remote) {
      return /* Pending */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (remote.tag) {
    return /* Ready */Block.__(1, [Curry._1(f, remote[0])]);
  } else {
    return /* Error */Block.__(0, [remote[0]]);
  }
}

function map2(f, r1, r2) {
  if (typeof r1 === "number") {
    if (r1) {
      return /* Pending */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (r1.tag) {
    if (typeof r2 === "number") {
      if (r2) {
        return /* Pending */1;
      } else {
        return /* NotAsked */0;
      }
    } else if (r2.tag) {
      return /* Ready */Block.__(1, [Curry._2(f, r1[0], r2[0])]);
    } else {
      return /* Error */Block.__(0, [r2[0]]);
    }
  } else {
    return /* Error */Block.__(0, [r1[0]]);
  }
}

function map3(f, r1, r2, r3) {
  if (typeof r1 === "number") {
    if (r1) {
      return /* Pending */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (r1.tag) {
    if (typeof r2 === "number") {
      if (r2) {
        return /* Pending */1;
      } else {
        return /* NotAsked */0;
      }
    } else if (r2.tag) {
      if (typeof r3 === "number") {
        if (r3) {
          return /* Pending */1;
        } else {
          return /* NotAsked */0;
        }
      } else if (r3.tag) {
        return /* Ready */Block.__(1, [Curry._3(f, r1[0], r2[0], r3[0])]);
      } else {
        return /* Error */Block.__(0, [r3[0]]);
      }
    } else {
      return /* Error */Block.__(0, [r2[0]]);
    }
  } else {
    return /* Error */Block.__(0, [r1[0]]);
  }
}

function flatten(r) {
  if (typeof r === "number") {
    if (r) {
      return /* Pending */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (r.tag) {
    return r[0];
  } else {
    return /* Error */Block.__(0, [r[0]]);
  }
}

function flatMap(f, remote) {
  if (typeof remote === "number") {
    if (remote) {
      return /* Pending */1;
    } else {
      return /* NotAsked */0;
    }
  } else if (remote.tag) {
    return Curry._1(f, remote[0]);
  } else {
    return /* Error */Block.__(0, [remote[0]]);
  }
}

function withDefault(a, rem) {
  if (typeof rem === "number" || rem.tag !== 1) {
    return a;
  } else {
    return rem[0];
  }
}

function fromResult(res) {
  if (res.tag) {
    return /* Ready */Block.__(1, [res[0]]);
  } else {
    return /* Error */Block.__(0, [res[0]]);
  }
}

function fromOption(opt) {
  if (opt) {
    return /* Ready */Block.__(1, [opt[0]]);
  } else {
    return /* NotAsked */0;
  }
}

function isNotAsked(remote) {
  if (typeof remote === "number" && remote === 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function isPending(remote) {
  if (typeof remote === "number" && remote !== 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function isError(remote) {
  if (typeof remote === "number" || remote.tag) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function isReady(remote) {
  if (typeof remote === "number" || remote.tag !== 1) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

var pending = /* Pending */1;

var notAsked = /* NotAsked */0;

exports.ready       = ready;
exports.error       = error;
exports.pending     = pending;
exports.notAsked    = notAsked;
exports.map         = map;
exports.map2        = map2;
exports.map3        = map3;
exports.flatten     = flatten;
exports.flatMap     = flatMap;
exports.withDefault = withDefault;
exports.fromResult  = fromResult;
exports.fromOption  = fromOption;
exports.isNotAsked  = isNotAsked;
exports.isPending   = isPending;
exports.isError     = isError;
exports.isReady     = isReady;
/* No side effect */
