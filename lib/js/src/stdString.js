// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var Js_exn                  = require("bs-platform/lib/js/js_exn.js");
var $$String                = require("bs-platform/lib/js/string.js");
var Caml_string             = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function length(prim) {
  return prim.length;
}

function get(index, str) {
  try {
    return /* Some */[Caml_string.get(str, index)];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function sub(start, len, str) {
  try {
    return $$String.sub(str, start, len);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return "";
    } else {
      throw exn;
    }
  }
}

function concat(x, y) {
  return x + y;
}

function indexOf(ch, str) {
  try {
    return /* Some */[$$String.index(str, ch)];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function lastIndexOf(ch, str) {
  try {
    return /* Some */[$$String.rindex(str, ch)];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function indexFrom(i, ch, str) {
  try {
    return /* Some */[$$String.index_from(str, i, ch)];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function lastIndexFrom(i, ch, str) {
  try {
    return /* Some */[$$String.rindex_from(str, i, ch)];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function contains(c, s) {
  return $$String.contains(s, c);
}

function containsFrom(i, c, s) {
  try {
    return $$String.contains_from(s, i, c);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return /* false */0;
    } else {
      throw exn;
    }
  }
}

function containsUntil(i, c, s) {
  try {
    return $$String.rcontains_from(s, i, c);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return /* false */0;
    } else {
      throw exn;
    }
  }
}

var make = $$String.make;

var init = $$String.init;

var join = $$String.concat;

var iter = $$String.iter;

var iteri = $$String.iteri;

var map = $$String.map;

var mapi = $$String.mapi;

var trim = $$String.trim;

var escaped = $$String.escaped;

var uppercase = $$String.uppercase;

var lowercase = $$String.lowercase;

var capitalize = $$String.capitalize;

var uncapitalize = $$String.uncapitalize;

var compare = $$String.compare;

exports.length        = length;
exports.get           = get;
exports.make          = make;
exports.init          = init;
exports.sub           = sub;
exports.concat        = concat;
exports.join          = join;
exports.iter          = iter;
exports.iteri         = iteri;
exports.map           = map;
exports.mapi          = mapi;
exports.trim          = trim;
exports.escaped       = escaped;
exports.indexOf       = indexOf;
exports.lastIndexOf   = lastIndexOf;
exports.indexFrom     = indexFrom;
exports.lastIndexFrom = lastIndexFrom;
exports.contains      = contains;
exports.containsFrom  = containsFrom;
exports.containsUntil = containsUntil;
exports.uppercase     = uppercase;
exports.lowercase     = lowercase;
exports.capitalize    = capitalize;
exports.uncapitalize  = uncapitalize;
exports.compare       = compare;
/* No side effect */
