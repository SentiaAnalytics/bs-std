// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Prelude   = require("./Prelude.js");
var StdDict   = require("./StdDict.js");
var StdList   = require("./StdList.js");
var StdOption = require("./StdOption.js");
var StdRemote = require("./StdRemote.js");
var StdResult = require("./StdResult.js");
var StdString = require("./StdString.js");

var Option = /* module */[
  /* some */StdOption.some,
  /* none */StdOption.none,
  /* map */StdOption.map,
  /* map2 */StdOption.map2,
  /* map3 */StdOption.map3,
  /* flatten */StdOption.flatten,
  /* flatMap */StdOption.flatMap,
  /* withDefault */StdOption.withDefault,
  /* fromResult */StdOption.fromResult,
  /* fromRemote */StdOption.fromRemote,
  /* isNone */StdOption.isNone,
  /* isSome */StdOption.isSome,
  /* encode */StdOption.encode,
  /* decode */StdOption.decode
];

var Remote = /* module */[
  /* ready */StdRemote.ready,
  /* error */StdRemote.error,
  /* pending */StdRemote.pending,
  /* notAsked */StdRemote.notAsked,
  /* map */StdRemote.map,
  /* map2 */StdRemote.map2,
  /* map3 */StdRemote.map3,
  /* flatten */StdRemote.flatten,
  /* flatMap */StdRemote.flatMap,
  /* withDefault */StdRemote.withDefault,
  /* fromResult */StdRemote.fromResult,
  /* fromOption */StdRemote.fromOption,
  /* isNotAsked */StdRemote.isNotAsked,
  /* isPending */StdRemote.isPending,
  /* isFailed */StdRemote.isFailed,
  /* isReady */StdRemote.isReady,
  /* encode */StdRemote.encode
];

var Result = /* module */[
  /* map */StdResult.map,
  /* map2 */StdResult.map2,
  /* map3 */StdResult.map3,
  /* flatten */StdResult.flatten,
  /* flatMap */StdResult.flatMap,
  /* withDefault */StdResult.withDefault,
  /* fromOption */StdResult.fromOption,
  /* isError */StdResult.isError,
  /* isOk */StdResult.isOk,
  /* encode */StdResult.encode
];

var List = /* module */[
  /* length */StdList.length,
  /* isEmpty */StdList.isEmpty,
  /* reverse */StdList.reverse,
  /* merge */StdList.merge,
  /* repeat */StdList.repeat,
  /* range */StdList.range,
  /* cons */StdList.cons,
  /* append */StdList.append,
  /* flatten */StdList.flatten,
  /* zip */StdList.zip,
  /* head */StdList.head,
  /* tail */StdList.tail,
  /* nth */StdList.nth,
  /* take */StdList.take,
  /* takeLast */StdList.takeLast,
  /* takeWhile */StdList.takeWhile,
  /* takeUntil */StdList.takeUntil,
  /* drop */StdList.drop,
  /* dropLast */StdList.dropLast,
  /* dropWhile */StdList.dropWhile,
  /* dropUntil */StdList.dropUntil,
  /* filter */StdList.filter,
  /* map */StdList.map,
  /* mapIndexed */StdList.mapIndexed,
  /* map2 */StdList.map2,
  /* flatMap */StdList.flatMap,
  /* flatMap2 */StdList.flatMap2,
  /* filterMap */StdList.filterMap,
  /* iter */StdList.iter,
  /* iter2 */StdList.iter2,
  /* iterIndexed */StdList.iterIndexed,
  /* foldLeft */StdList.foldLeft,
  /* foldRight */StdList.foldRight,
  /* foldLeft2 */StdList.foldLeft2,
  /* foldRight2 */StdList.foldRight2,
  /* find */StdList.find,
  /* all */StdList.all,
  /* any */StdList.any,
  /* contains */StdList.contains,
  /* partition */StdList.partition,
  /* split */StdList.split,
  /* sort */StdList.sort,
  /* encode */StdList.encode,
  /* decode */StdList.decode
];

var Dict = /* module */[
  /* empty */StdDict.empty,
  /* fromList */StdDict.fromList,
  /* get */StdDict.get,
  /* find */StdDict.find,
  /* contains */StdDict.contains,
  /* set */StdDict.set,
  /* setDefault */StdDict.setDefault,
  /* keys */StdDict.keys,
  /* values */StdDict.values,
  /* iter */StdDict.iter,
  /* map */StdDict.map,
  /* mapValues */StdDict.mapValues,
  /* mapKeys */StdDict.mapKeys,
  /* filter */StdDict.filter,
  /* foldLeft */StdDict.foldLeft,
  /* foldRight */StdDict.foldRight,
  /* encode */StdDict.encode,
  /* decode */StdDict.decode
];

var $$String = /* module */[
  /* length */StdString.length,
  /* isEmpty */StdString.isEmpty,
  /* fromChar */StdString.fromChar,
  /* fromInt */StdString.fromInt,
  /* fromFloat */StdString.fromFloat,
  /* fromChars */StdString.fromChars,
  /* escaped */StdString.escaped,
  /* reverse */StdString.reverse,
  /* uppercase */StdString.uppercase,
  /* lowercase */StdString.lowercase,
  /* capitalize */StdString.capitalize,
  /* uncapitalize */StdString.uncapitalize,
  /* get */StdString.get,
  /* substring */StdString.substring,
  /* trim */StdString.trim,
  /* take */StdString.take,
  /* drop */StdString.drop,
  /* takeLast */StdString.takeLast,
  /* dropLast */StdString.dropLast,
  /* takeUntil */StdString.takeUntil,
  /* takeWhile */StdString.takeWhile,
  /* dropUntil */StdString.dropUntil,
  /* dropWhile */StdString.dropWhile,
  /* split */StdString.split,
  /* words */StdString.words,
  /* lines */StdString.lines,
  /* cons */StdString.cons,
  /* uncons */StdString.uncons,
  /* append */StdString.append,
  /* join */StdString.join,
  /* pad */StdString.pad,
  /* leftPad */StdString.leftPad,
  /* rightPad */StdString.rightPad,
  /* iter */StdString.iter,
  /* iterIndexed */StdString.iterIndexed,
  /* map */StdString.map,
  /* mapIndexed */StdString.mapIndexed,
  /* indexOf */StdString.indexOf,
  /* lastIndexOf */StdString.lastIndexOf,
  /* indexFrom */StdString.indexFrom,
  /* lastIndexFrom */StdString.lastIndexFrom,
  /* contains */StdString.contains,
  /* encode */StdString.encode,
  /* decode */StdString.decode
];

var identity = Prelude.identity;

var always = Prelude.always;

var $$void = Prelude.$$void;

var $great$great = Prelude.$great$great;

var flip = Prelude.flip;

var curry = Prelude.curry;

var uncurry = Prelude.uncurry;

var tap = Prelude.tap;

var decodeJSON = Prelude.decodeJSON;

var parseJSON = Prelude.parseJSON;

var Async = 0;

exports.identity     = identity;
exports.always       = always;
exports.$$void       = $$void;
exports.$great$great = $great$great;
exports.flip         = flip;
exports.curry        = curry;
exports.uncurry      = uncurry;
exports.tap          = tap;
exports.decodeJSON   = decodeJSON;
exports.parseJSON    = parseJSON;
exports.Async        = Async;
exports.Option       = Option;
exports.Remote       = Remote;
exports.Result       = Result;
exports.List         = List;
exports.Dict         = Dict;
exports.$$String     = $$String;
/* StdDict Not a pure module */
