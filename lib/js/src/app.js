// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var List     = require("bs-platform/lib/js/list.js");
var Curry    = require("bs-platform/lib/js/curry.js");
var Task$Std = require("./task.js");

function perform(dispatch, cmd) {
  if (cmd) {
    return Task$Std.fork((function () {
                  return /* () */0;
                }), (function (f) {
                  return Curry._1(f, dispatch);
                }), cmd[0]);
  } else {
    return /* () */0;
  }
}

function batch(cmds) {
  return /* Some */[Task$Std.succeed((function (dispatch) {
                  return List.iter((function (param) {
                                return perform(dispatch, param);
                              }), cmds);
                }))];
}

function fromTask(task) {
  return /* Some */[Task$Std.map((function (action, dispatch) {
                  return Curry._1(dispatch, action);
                }), task)];
}

function make(init, update, render, $staropt$star, $staropt$star$1, $staropt$star$2, _) {
  var onAction = $staropt$star ? $staropt$star[0] : (function () {
        return /* () */0;
      });
  var onUpdate = $staropt$star$1 ? $staropt$star$1[0] : (function () {
        return /* () */0;
      });
  var onLoad = $staropt$star$2 ? $staropt$star$2[0] : (function (_, _$1) {
        return /* () */0;
      });
  var state = [init];
  var dispatch = function (a) {
    Curry._1(onAction, a);
    var match = Curry._2(update, a, state[0]);
    state[0] = match[0];
    Curry._1(onUpdate, state[0]);
    Curry._2(render, state[0], dispatch);
    return perform(dispatch, match[1]);
  };
  Curry._2(render, state[0], dispatch);
  return Curry._2(onLoad, state[0], dispatch);
}

var Cmd = [
  /* None */0,
  batch,
  fromTask
];

exports.Cmd  = Cmd;
exports.make = make;
/* No side effect */
