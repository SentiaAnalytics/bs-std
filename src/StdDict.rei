open Prelude;
let empty: dict('key, 'value);
let fromList: list(('key, 'value)) => dict('key, 'value);
let get: ('key, dict('key, 'value)) => option('value);
let find: ('value => bool, dict('key, 'value)) => option('value);
let contains: ('key, dict('key, 'value)) => bool;
let set: ('key, 'value, dict('key, 'value)) => dict('key, 'value);
let setDefault: ('key, 'value, dict('key, 'value)) => dict('key, 'value);
let keys: dict('key, 'value) => list('key);
let values: dict('key, 'value) => list('value);
let iter: (('key, 'value) => unit, dict('key, 'value)) => unit;
let map: (('key, 'a) => 'b, dict('key, 'a)) => dict('key, 'b);
let mapValues: ('a => 'b, dict('key, 'a)) => dict('key, 'b);
let mapKeys: ('k1 => 'k2, dict('k1, 'value)) => dict('k2, 'value);
let filter: (('key, 'value) => bool, dict('key, 'value)) => dict('key, 'value);
let foldLeft: (('key, 'value, 'acc) => 'acc, 'acc, dict('key, 'value)) => 'acc;
let foldRight: (('key, 'value, 'acc) => 'acc, 'acc, dict('key, 'value)) => 'acc;
let encode: ('key => Js.Dict.key, 'value => Js.Json.t, dict('key, 'value)) => Js.Json.t;
let decode: (Js.Dict.key => 'key, Js.Json.t => 'value, Js.Json.t) => dict('key, 'value);